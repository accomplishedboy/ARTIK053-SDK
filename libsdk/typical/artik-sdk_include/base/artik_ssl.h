#ifndef INCLUDE_ARTIK_SSL_H_
#define INCLUDE_ARTIK_SSL_H_

#ifdef __cplusplus
extern "C" {
#endif

/*! \file artik_ssl.h
 *
 *  \brief SSL/TLS related definitions
 *
 *  Definitions for passing SSL/TLS parameters
 *  to various connectivity modules.
 *
 */

/*!
 *  \brief SSL verification strategy
 *
 *  Type for specifying the SSL server certificate
 *  verification strategy
 */
typedef enum {
    ARTIK_SSL_VERIFY_NONE,
    ARTIK_SSL_VERIFY_OPTIONAL,
    ARTIK_SSL_VERIFY_REQUIRED
} artik_ssl_verify_t;

/*!
 *  \brief SSL certificate structure
 *
 *  Structure containing a SSL certificate
 */
typedef struct {
    /*!
     *  \brief Pointer to the certificate's data
     */
    char *data;
    /*!
     *  \brief Length in bytes of the certificate's data
     */
    unsigned int len;
} artik_ssl_certificate;

/*!
 *  \brief SSL key structure
 *
 *  Structure containing a public or private key
 */
typedef struct {
    /*!
     *  \brief Pointer to the key's data
     */
    char *data;
    /*!
     *  \brief Length in bytes of the key's data
     */
    unsigned int len;
} artik_ssl_key;

/*!
 *  \brief SSL configuration structure
 *
 *  Structure containing SSL configuration
 *  for secure requests
 */
typedef struct {
    /*!
     *  \brief If true, use certificate and key generated by the Secure Element
     */
    bool use_se;
    /*!
     *  \brief If certificate's data is non-null, use it as trusted root CA
     *         for verifying the server's certificate
     */
    artik_ssl_certificate ca_cert;
    /*!
     *  \brief If certificate's data is non-null, use it as the client
     *         certificate to send to the server during SSL
     *         handshake
     */
    artik_ssl_certificate client_cert;
    /*!
     *  \brief If key's data is non-null, use it as the client
     *         private key to send to the server during SSL
     *         handshake
     */
    artik_ssl_key client_key;
    /*!
     *  \brief Select the level of verification of the server certificate
     *         authenticity via trusted root CA.
     */
    artik_ssl_verify_t verify_cert;
} artik_ssl_config;

#ifdef __cplusplus
}
#endif
#endif				/* INCLUDE_ARTIK_SSL_H_ */
