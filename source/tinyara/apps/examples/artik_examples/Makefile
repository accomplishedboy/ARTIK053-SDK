-include $(TOPDIR)/.config
-include $(TOPDIR)/Make.defs
include $(APPDIR)/Make.defs

APPNAME = artik_examples
PRIORITY = SCHED_PRIORITY_DEFAULT
STACKSIZE = 2048
ASRCS =
ARTIK_SDK_DIR = $(TOPDIR)/../external/artik-sdk
API_DIR = api
CFLAGS += -Wno-error=strict-prototypes
CFLAGS += -I$(ARTIK_SDK_DIR)/include/base
CFLAGS += -I$(ARTIK_SDK_DIR)/include/systemio
CFLAGS += -I$(ARTIK_SDK_DIR)/include/connectivity
CFLAGS += -I$(ARTIK_SDK_DIR)/include/wifi
CFLAGS += -I$(ARTIK_SDK_DIR)/include/lwm2m
CFLAGS += -I$(TOPDIR)/net
CFLAGS += -I$(APPDIR)/include
CFLAGS += -I$(APPDIR)/include/netutils
CSRCS += command.c
CSRCS += wifi-auto.c

ifeq ($(CONFIG_EXAMPLES_ARTIK_ADC),y)
  MAINSRC += adc-api.c
endif
ifeq ($(CONFIG_EXAMPLES_ARTIK_CLOUD), y)
  MAINSRC += cloud-api.c
endif
ifeq ($(CONFIG_EXAMPLES_ARTIK_GPIO), y)
  MAINSRC += gpio-api.c
endif
ifeq ($(CONFIG_EXAMPLES_ARTIK_HTTP), y)
  MAINSRC += http-api.c
endif
ifeq ($(CONFIG_EXAMPLES_ARTIK_MODULE), y)
  MAINSRC += module-api.c
endif
ifeq ($(CONFIG_EXAMPLES_ARTIK_PWM), y)
  MAINSRC += pwm-api.c
endif
ifeq ($(CONFIG_EXAMPLES_ARTIK_SECURITY), y)
  MAINSRC += security-api.c
endif
ifeq ($(CONFIG_EXAMPLES_ARTIK_WEBSOCKET), y)
  MAINSRC += websocket-api.c
endif
ifeq ($(CONFIG_EXAMPLES_ARTIK_WIFI), y)
  MAINSRC += wifi-api.c
endif
ifeq ($(CONFIG_EXAMPLES_ARTIK_ALL_EXAMPLES), y)
  CSRCS += adc-api.c
  CSRCS += cloud-api.c
  CSRCS += gpio-api.c
  CSRCS += http-api.c
  CSRCS += module-api.c
  CSRCS += pwm-api.c
  CSRCS += security-api.c
  CSRCS += websocket-api.c
  CSRCS += wifi-api.c
  MAINSRC += examples-api.c
endif

AOBJS = $(ASRCS:.S=$(OBJEXT))
COBJS = $(CSRCS:.c=$(OBJEXT))
MAINOBJ = $(MAINSRC:.c=$(OBJEXT))

SRCS = $(ASRCS) $(CSRCS) $(MAINSRC)
OBJS = $(AOBJS) $(COBJS)

ifneq ($(CONFIG_BUILD_KERNEL),y)
  OBJS += $(MAINOBJ)
endif

ifeq ($(CONFIG_WINDOWS_NATIVE),y)
  BIN = ..\..\libapps$(LIBEXT)
else
ifeq ($(WINTOOL),y)
  BIN = ..\\..\\libapps$(LIBEXT)
else
  BIN = ../../libapps$(LIBEXT)
endif
endif

ifeq ($(WINTOOL),y)
  INSTALL_DIR = "${shell cygpath -w $(BIN_DIR)}"
else
  INSTALL_DIR = $(BIN_DIR)
endif

# Common build
VPATH =

all: .built
.PHONY: clean depend distclean

$(AOBJS): %$(OBJEXT): %.S
	$(call ASSEMBLE, $<, $@)

$(COBJS) $(MAINOBJ): %$(OBJEXT): %.c
	$(call COMPILE, $<, $@)

.built: $(OBJS)
	$(call ARCHIVE, $(BIN), $(OBJS))
	@touch .built

ifeq ($(CONFIG_BUILD_KERNEL),y)
$(BIN_DIR)$(DELIM)$(PROGNAME): $(OBJS) $(MAINOBJ)
	@echo "LD: $(PROGNAME)"
	$(Q) $(LD) $(LDELFFLAGS) $(LDLIBPATH) -o $(INSTALL_DIR)$(DELIM)$(PROGNAME) $(ARCHCRT0OBJ) $(MAINOBJ) $(LDLIBS)
	$(Q) $(NM) -u  $(INSTALL_DIR)$(DELIM)$(PROGNAME)

install: $(BIN_DIR)$(DELIM)$(PROGNAME)

else
install:

endif

ifeq ($(CONFIG_NSH_BUILTIN_APPS),y)
$(BUILTIN_REGISTRY)$(DELIM)$(APPNAME)_main.bdat: $(DEPCONFIG) Makefile
	$(call REGISTER,$(APPNAME),$(PRIORITY),$(STACKSIZE),$(APPNAME)_main)

context: $(BUILTIN_REGISTRY)$(DELIM)$(APPNAME)_main.bdat
else
context:
endif

.depend: Makefile $(SRCS)
	@$(MKDEP) $(ROOTDEPPATH) "$(CC)" -- $(CFLAGS) -- $(SRCS) >Make.dep
	@touch $@

depend: .depend

clean:
	$(call DELFILE, .built)
	$(call DELFILE, $(wildcard $(API_DIR)/*.o))
	$(call CLEAN)

distclean: clean
	$(call DELFILE, Make.dep)
	$(call DELFILE, .depend)
-include Make.dep
.PHONY: preconfig
	preconfig:
